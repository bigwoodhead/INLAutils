% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ParallelRasterExtract.R
\name{parallelExtract}
\alias{parallelExtract}
\title{Parallel extraction of means of rasters by shape file.}
\usage{
parallelExtract(raster, shape, fun = mean, id = "OBJECTID", ...)
}
\arguments{
\item{raster}{A raster brick or stack}

\item{shape}{A shape object}

\item{fun}{The function used to aggregate the pixel data. If NULL, raw pixel data is returned.}

\item{id}{Name of column in shape object to be used to bind an ID column to output.}

\item{...}{Other arguments to raster::extract}
}
\description{
Parallelisation is performed across rasters, not shapes. 
So this function is only useful if you are extracting 
data from many raster layers.
As the overhead for parallel computation in windows is high
it only makes sense to parallelise in this way.
}
\examples{
library(raster)
# Create raster stack
r <- raster(ncol=36, nrow=18)
r[] <- 1:ncell(r)
r <- stack(r, r)

# Create polygon
cds1 <- rbind(c(-180,-20), c(-160,5), c(-60, 0), c(-160,-60), c(-180,-20))
cds2 <- rbind(c(80,0), c(100,60), c(120,0), c(120,-55), c(80,0))
polys <- spPolygons(cds1, cds2)

#plot(r)
#plot(polys, add=TRUE)

# Standard raster::extract
v <- extract(r, polys)
v <- extract(r, polys, fun = mean, df = TRUE)

# Parallel extract
#  Register the cluster first (use doMC on linux)
cl <- snow::makeCluster(2) #change the 2 to your number of CPU cores  
doSNOW::registerDoSNOW(cl)  
v2 <- parallelExtract(r, polys, fun = mean)
snow::stopCluster(cl)  
}

